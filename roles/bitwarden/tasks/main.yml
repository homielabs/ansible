# thanks, https://github.com/aeolyus/homelab/blob/master/bitwarden/tasks/main.yml
---
- name: set domain to vault
  set_fact:
    service: vault
    caddyfile_block: |
      vault.{{ domain }} {
        reverse_proxy /notifications/hub/negotiate  localhost:3011
        reverse_proxy /notifications/hub/           localhost:3012
        reverse_proxy /*                            localhost:3011
      }

- name: install bitwarden docker container
  podman_image:
    name: bitwardenrs/server:alpine
    state: present

- name: check bitwarden env file
  stat:
    path: /data/bitwarden/.env
  register: bitwarden_env

- name: generate bitwarden admin token
  set_fact:
    bitwarden_admin_token: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters') }}"
  when: not bitwarden_env.stat.exists

- name: announce bitwarden admin token
  debug:
    msg: "Bitwarden admin token: {{ bitwarden_admin_token }}"
    changed_when: true
  when: not bitwarden_env.stat.exists

- name: ensure bitwarden data directory exists
  file:
    path: /data/bitwarden/
    state: directory
  when: not bitwarden_env.stat.exists

- name: copy bitwarden env file
  template:
    src: .env.j2
    dest: /data/bitwarden/.env
  when: not bitwarden_env.stat.exists

- name: check to see if systemd service file exists already
  stat:
    path: /etc/systemd/system/container-bitwarden.service
  register: bitwarden_service

- name: start bitwarden
  shell: podman run -d --net=slirp4netns --name bitwarden -v /data/bitwarden/:/data/:Z -p 127.0.0.1:3011:80 -p 127.0.0.1:3012:3012 --env-file=/data/bitwarden/.env bitwardenrs/server:alpine # no --rm because we want env vars to persist
  register: bitwarden_command_result
  failed_when: "bitwarden_command_result.stderr != '' and 'already in use' not in bitwarden_command_result.stderr" # ignore container name already in use errors
  when: not bitwarden_service.stat.exists

- name: generate systemd service
  shell:
    cmd: podman generate systemd --name bitwarden > /etc/systemd/system/container-bitwarden.service
    creates: /etc/systemd/system/container-bitwarden.service
  when: not bitwarden_service.stat.exists and bitwarden_command_result.changed

- name: stop bitwarden so systemd can take over
  shell: podman container stop bitwarden
  when: not bitwarden_service.stat.exists and bitwarden_command_result.changed

- name: start systemd container-bitwarden service
  service:
    name: container-bitwarden
    state: started
    enabled: true
    daemon-reload: true
  notify:
    - setup reverse proxy config
