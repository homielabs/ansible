---
- name: install step-ca docker container
  containers.podman.podman_image:
    name: smallstep/step-ca:{{ image_tag }}
    state: present

- name: ensure step-ca data directory exists
  ansible.builtin.file:
    path: /data/step-ca/
    state: directory
    mode: 0777

- name: check step-ca env file
  ansible.builtin.stat:
    path: /data/step-ca/.env
  register: step_ca_env

- name: generate admin token, root/intermediate cert + install certs
  block:
    - name: generate step-ca admin token
      ansible.builtin.set_fact:
        step_ca_admin_token: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters') }}"

    - name: write step-ca password
      ansible.builtin.lineinfile:
        path: /data/step-ca/.env
        line: "{{ step_ca_admin_token }}"
        create: true
        mode: 0644

    - name: generate root/intermediate certs
      containers.podman.podman_container:
        name: cert_generator
        image: smallstep/step-ca:{{ image_tag }}
        command: >-
          step ca init
            --name=ca.{{ domain }}
            --dns=ca.{{ domain }},{{ ansible_default_ipv4.address }},localhost
            --address=0.0.0.0:8443
            --provisioner=jwk
            --provisioner-password-file=/home/step/.env
            --password-file=/home/step/.env
        volume:
          - /data/step-ca/:/home/step/:Z

    - name: wait for certs to be generated
      ansible.builtin.wait_for:
        path: /data/step-ca/certs/root_ca.crt

  when: not step_ca_env.stat.exists

- name: determine if certs were generated
  ansible.builtin.stat:
    path: /data/step-ca/certs/root_ca.crt
  register: root_ca_cert

- name: assert certs were generated
  ansible.builtin.assert:
    that:
      - root_ca_cert.stat.exists

# this way you always do it!
- name: include distro-specific cert management tasks
  include_tasks: "{{ ansible_distribution | lower }}-certs.yml"

- name: add the ACME provisioner to the config
  containers.podman.podman_container:
    name: cert_generator
    image: smallstep/step-ca:{{ image_tag }}
    command: >-
      step ca provisioner add acme -type=acme
    rm: true
    volume:
      - /data/step-ca/:/home/step/:Z

- name: check to see if systemd service file exists already
  ansible.builtin.stat:
    path: /etc/systemd/system/container-step-ca.service
  register: step_ca_service

- name: configure ACME server service
  block:
    - name: start ACME server
      containers.podman.podman_container:
        name: step-ca
        image: smallstep/step-ca:{{ image_tag }}
        command: >-
          step-ca
            -password-file=/home/step/.env
            /home/step/config/ca.json
        # network: slirp4netns
        publish:
          - "0.0.0.0:8443:8443"
        volume:
          - /data/step-ca/:/home/step/:Z
      register: step_ca_command_result

    - name: generate systemd service
      ansible.builtin.shell:
        cmd: >-
          podman generate systemd --name step-ca >
          /etc/systemd/system/container-step-ca.service
        creates: /etc/systemd/system/container-step-ca.service
      when:
        - step_ca_command_result.changed

    - name: stop step-ca so systemd can take over
      ansible.builtin.command: podman container stop step-ca
      when:
        - step_ca_command_result.changed
  when: not step_ca_service.stat.exists

# restart because otherwise badger messes up, and bonus is we restart reverse
# proxy for new root certs
- name: start systemd container-step-ca service
  ansible.builtin.service:
    name: container-step-ca
    state: restarted
    enabled: true
    daemon-reload: true

- name: add service to reverse proxy
  include_tasks:
    file: roles/caddy/tasks/add_service.yml
    apply:
      vars:
        service: ca
        # the tls::ca section is to avoid a possible chicken-egg
        # it may not be necessary
        caddyfile_block: |
          ca.{{ domain }} {
            reverse_proxy /* https://localhost:8443
            tls {
              ca https://localhost:8443/acme/acme/directory
            }
          }
